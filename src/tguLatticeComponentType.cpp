/* **********************************************************************
Copyright 2020  Dr. J. C. Shillcock and Prof. Dr. R. Lipowsky, Director at the Max Planck Institute (MPI) of Colloids and Interfaces; Head of Department Theory and Bio-Systems.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************** */
// tguLatticeComponentType.cpp: implementation of the tguLatticeComponentType class.
//
//////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "SimDefs.h"
#include "tguLatticeComponentType.h"
#include "tguLatticeVectorType.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
// Currently, only real values can be generated by the lattice vector types.
// This class wraps an instance of the lattice vector class and specifies
// one of its components. It passes 0.0 to the base class for storage as the 
// initial value (although this may not be
// used). Thereafter, it always returns the same component of a lattice vector
// when its GetNextValue() function is called.
//
// Note that we cannot validate the dimension passed in as "i" here, so the
// calling routine must ensure that it is valid.

tguLatticeComponentType::tguLatticeComponentType(tguLatticeVectorType* const pLattice, long i) : tguArgumentType(0.0), 
                                                 m_pLattice(pLattice), m_i(i)
{
}

tguLatticeComponentType::~tguLatticeComponentType()
{
    // We need to destroy the contained lattice instance, but we have to make
    // sure we only do it once. We call its destructor only when this instance
    // is an X component. Whatever the dimension of the lattice, it always has
    // an X component.

    if(m_i == 0)
    {
        delete m_pLattice;
    }
}

// Because the tguArgumentType base class demands that we implement GetNextValue() 
// for all types of arguments, we provide do-nothing implementations for the
// integer and string versions here. 

void tguLatticeComponentType::GetNextValue(long *pValue)
{
}

// Function that returns the m_i-th component of the wrapped lattice vector
// instance.  We pass the call on to the wrapped lattice object and get it
// to calculate the component associated with this component instance.
// Note that the components are zero-indexed.

void tguLatticeComponentType::GetNextValue(double* pValue)
{
    *pValue = m_pLattice->GetNextComponent(m_i);
}

void tguLatticeComponentType::GetNextValue(zString *pValue)
{
}

// Override of the base class functions to return the current value stored
// in this object. This is done because the base class member variables are not
// used for lattice vector objects. However, we only allow real values for now,
// so the integer and string overrides do nothing.

void tguLatticeComponentType::GetValue(long* pValue) const
{
}

void tguLatticeComponentType::GetValue(double* pValue) const
{
    *pValue = m_pLattice->GetComponent(m_i);
}

void tguLatticeComponentType::GetValue(zString* pValue) const
{
}

