/* **********************************************************************
Copyright 2020  Dr. J. C. Shillcock and Prof. Dr. R. Lipowsky, Director at the Max Planck Institute (MPI) of Colloids and Interfaces; Head of Department Theory and Bio-Systems.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************** */
// prBLMVesicleFusion.cpp: implementation of the prBLMVesicleFusion class.
//
//////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "SimDefs.h"
#include "SimMathFlags.h"
#include "SimAlgorithmFlags.h"
#include "SimXMLFlags.h"
#include "prBLMVesicleFusion.h"
#include "Bilayer.h"
#include "Vesicle.h"
#include "LogCreateEventFailed.h"
#include "SimState.h"
#include "ISimBox.h"
#include "TimeSeriesData.h"
#include "InputData.h"
#include "aaRegionToType.h"
#include "Slice.h"

// Events monitored by the process

#include "evLamellaPore.h"
#include "evVesiclePore.h"

// Commands generated by the process

#include "ccSetCommandTimer.h"
#include "ccSelectBeadTypeInCylinder.h"
#include "ccSetDPDBeadConsIntByType.h"
#include "ctChangeBeadType.h"
#include "ctConstantForceOnTarget.h"
#include "ctRadialForceOnTarget.h"
#include "ctRemoveCommandTargetActivity.h"

// Commands implementing the IModifyBLMVesicleFusion interface

#include "pcBLMVesicleFusionSetCondenseDelay.h"
#include "pcBLMVesicleFusionSetCondenseDuration.h"
#include "pcBLMVesicleFusionSetHalfLength.h"
#include "pcBLMVesicleFusionSetInnerRadius.h"
#include "pcBLMVesicleFusionSetMaxCMApproach.h"
#include "pcBLMVesicleFusionSetMaxDistalTouch.h"
#include "pcBLMVesicleFusionSetMinFusionPoreSize.h"
#include "pcBLMVesicleFusionSetMinMixThreshold.h"
#include "pcBLMVesicleFusionSetMinPoreSize.h"
#include "pcBLMVesicleFusionSetOuterRadius.h"
#include "pcBLMVesicleFusionSetRadialForce.h"
#include "pcBLMVesicleFusionSetStretchDelay.h"
#include "pcBLMVesicleFusionSetStretchDuration.h"

// Messages issued as a result of process logic

#include "LogCommandFailed.h"
#include "LogpcBLMVesicleFusionSetCondenseDelay.h"
#include "LogpcBLMVesicleFusionSetCondenseDuration.h"
#include "LogpcBLMVesicleFusionSetStretchDelay.h"
#include "LogpcBLMVesicleFusionSetStretchDuration.h"

#include "LogVesicleApproach.h"
#include "LogVesicleDistalMix.h"
#include "LogVesicleDistalTouch.h"
#include "LogVesicleFusionPore.h"
#include "LogVesiclePore.h"
#include "LogVesicleProximalMix.h"
#include "LogVesicleStalk.h"

// STL using declarations


//////////////////////////////////////////////////////////////////////
// Global members
//////////////////////////////////////////////////////////////////////

// Static member variable containing the identifier for this process. 
// The static member function GetType() is invoked by the xxProcessObject 
// to compare the type read from the control data file with each
// xxProcess-derived class so that it can create the appropriate object 
// to hold the process data.

const zString prBLMVesicleFusion::m_Type = "BLMVesicleFusion";

const zString prBLMVesicleFusion::GetType()
{
	return m_Type;
}

// We use an anonymous namespace to wrap the call to the factory object
// so that it is not accessible from outside this file. The identifying
// string is stored in the m_Type static member variable.
//
// Note that the Create() function is not a member function but a global 
// function hidden in the namespace.

namespace
{
	xxProcess* Create() {return new prBLMVesicleFusion();}

	const zString id = prBLMVesicleFusion::GetType();

	const bool bRegistered = acfProcessFactory::Instance()->Register(id, Create);
}

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

// The process state's file name depends on whether it is XML-enabled or not,
// so we use two different constructor signatures to allow for this. If it
// is XML-enabled, we write out the standard processing instructions and
// wrapper tags <ProcessState></ProcessState> as the first and last elements 
// in the file. Because the process state can write data until the simulation ends,
// we only write the end tag in the destructor.

prBLMVesicleFusion::prBLMVesicleFusion() : 	IModifyBLMVesicleFusion(),
                                            m_AggregateName1(""),
											m_AggregateName2(""),
											m_AggregateId1(0),
											m_AggregateId2(0),
											m_MaxCMApproach(0.0),
											m_MaxDistalTouch(0.0),
											m_MinPoreSize(0),
											m_MinFusionPoreSize(0),
											m_CondenseDelay(0),
											m_CondenseDuration(0),
											m_StretchDelay(0),
											m_StretchDuration(0),
											m_InnerRadius(0.0),
											m_OuterRadius(0.0),
											m_HalfLength(0.0),
											m_RadialForceMag(0.0),
											m_pBLM(0),
											m_pVesicle(0),
											m_bVesicleApproach(false),
											m_bVesicleDistalTouch(false),
											m_bVesicleDistalMix(false),
											m_bVesicleProximalMix(false),
											m_bStalk(false),
											m_bVesicleFusionPore(false),
											m_bBLMPore(false),
											m_bVesiclePore(false),
											m_bVesicleAboveBLM(false),
											m_VesicleNormalCMCoord(0.0),
											m_CMSeparation(0.0),
											m_OuterSeparation(0.0),
											m_BLMLipidType(-1),
											m_BLMLipidHeadType(-1),
											m_BLMLipidTailType(-1),
											m_VesicleLipidType(-1),
											m_VesicleLipidHeadType(-1),
											m_VesicleLipidTailType(-1),
											m_OuterLeafletMixTotal(0),
											m_InnerLeafletMixTotal(0),
											m_MergedProximalIndex(0),
											m_PoreSize(0),
											m_PoreArea(0.0),
											m_pDensityFile(0)
{

}

prBLMVesicleFusion::~prBLMVesicleFusion()
{
	if(m_pDensityFile)
	{
		delete m_pDensityFile;
		m_pDensityFile = 0;
	}

	// Delete the adapter classes that hold pointers to aggregates but NOT
	// the aggregates themselves as they are handled by CAnalysisState.

	if(m_pBLM)
	{
		delete m_pBLM;
		m_pBLM = NULL;
	}

	if(m_pVesicle)
	{
		delete m_pVesicle;
		m_pVesicle = NULL;
	}

}

// Member functions to write/read the data specific to the process.
// The put() function is empty as the base class putASCIIStartTags(), 
// putASCIIEndTags() and their XML equivalents replace its function.

zOutStream& prBLMVesicleFusion::put(zOutStream& os) const
{
	
	return os;
}

zInStream& prBLMVesicleFusion::get(zInStream& is)
{
	// Read base class data first

	xxProcess::get(is);

	zString token;
	zString aggregate1, aggregate2;
	long aggId1, aggId2;
	long minMixThreshold, minPoreSize, minFusionPoreSize;
	double maxApproach, maxDistalTouch;
	long condenseDelay, condenseDuration;
	long stretchDelay, stretchDuration;
	double innerRadius, outerRadius, halfLength;

	is >> token;
	if(!is.good() || token != "Aggregate")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> aggregate1 >> aggId1;
		if(!is.good() || aggregate1.empty() || aggId1 < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	// Note that the aggregate ids must be unique across all types of aggregate

	is >> token;
	if(!is.good() || token != "Aggregate")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> aggregate2 >> aggId2;
		if(!is.good() || aggregate2.empty() || aggId2 < 1 || aggId2 == aggId1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "MaxApproach")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> maxApproach;
		if(!is.good() || maxApproach < 0.0)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "MaxDistalTouch")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> maxDistalTouch;
		if(!is.good() || maxDistalTouch > maxApproach)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "MinMixThreshold")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> minMixThreshold;
		if(!is.good() || minMixThreshold < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "MinPoreSize")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> minPoreSize;
		if(!is.good() || minPoreSize < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "MinFusionPoreSize")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> minFusionPoreSize;
		if(!is.good() || minFusionPoreSize < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "CondenseDelay")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> condenseDelay;
		if(!is.good() || condenseDelay < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "CondenseDuration")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> condenseDuration;
		if(!is.good() || condenseDuration < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "StretchDelay")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> stretchDelay;
		if(!is.good() || stretchDelay < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "StretchDuration")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> stretchDuration;
		if(!is.good() || stretchDuration < 1)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "InnerRadius")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> innerRadius;
		if(!is.good() || innerRadius < 0.0)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "OuterRadius")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> outerRadius;
		if(!is.good() || outerRadius < 0.0 || outerRadius < innerRadius)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "HalfLength")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> halfLength;
		if(!is.good() || halfLength < 0.0 || halfLength > 0.5)
		{
			SetDataValid(false);
			return is;
		}
	}

	is >> token;
	if(!is.good() || token != "RadialForce")
	{
		SetDataValid(false);
		return is;
	}
	else
	{
		is >> m_RadialForceMag;
		if(!is.good() || m_RadialForceMag < 0.0)
		{
			SetDataValid(false);
			return is;
		}
	}

	m_AggregateName1	= aggregate1;
	m_AggregateName2	= aggregate2;
	m_AggregateId1		= aggId1;
	m_AggregateId2		= aggId2;
	m_MaxCMApproach		= maxApproach;
	m_MaxDistalTouch	= maxDistalTouch;
	m_MinMixThreshold	= minMixThreshold;
	m_MinPoreSize		= minPoreSize;
	m_MinFusionPoreSize	= minFusionPoreSize;
	m_CondenseDelay		= condenseDelay;
	m_CondenseDuration	= condenseDuration;
	m_StretchDelay		= stretchDelay;
	m_StretchDuration	= stretchDuration;
	m_InnerRadius		= innerRadius;
	m_OuterRadius		= outerRadius;
	m_HalfLength		= halfLength;

	return is;
}


// Non-static function to return the type of the process

const zString prBLMVesicleFusion::GetProcessType() const
{
	return m_Type;
}

// Function to return a pointer to a copy of the current process.

xxProcess* prBLMVesicleFusion::GetProcess() const
{
	return new prBLMVesicleFusion(*this);
}

// Function to update the state of the process using data from the associated
// aggregates (CVesicle) and events (evVesiclePore,...).
//
// This process monitors a vesicle and a planar bilayer to see if they fuse. 
// Messages are issued at the following (hyperthetical) stages of fusion
//
//	1	BLM-Vesicle CM separation <  m_MaxCMApproach
//	2	Outer leaflet separation  <  m_MaxDistalTouch
//	3	Local perturbation and mixing of BLM-Vesicle outer leaflets
//	4	Mixing of inner leaflets
//	5	Fusion pore forms and connects the vesicle interior to the BLM reservoir 
//
// Each stage is signalled by issuing a CLogInfoMessage, and the appearance of
// pores in the two vesicle membranes is monitored by the evVesiclePore events.
// External events are not defined for the other stages of fusion because they
// involve more than one aggregate.

void prBLMVesicleFusion::UpdateState(CSimState& rSimState, const ISimBox* const pISimBox)
{
	double vcm[3];

	vcm[0]	= m_pBLM->GetCMXPos() - m_pVesicle->GetCMXPos();
	vcm[1]	= m_pBLM->GetCMYPos() - m_pVesicle->GetCMYPos();
	vcm[2]	= m_pBLM->GetCMZPos() - m_pVesicle->GetCMZPos();

	m_CMSeparation = sqrt(vcm[0]*vcm[0] + vcm[1]*vcm[1] + vcm[2]*vcm[2]);

	// ****************************************
	// Fusion stage 1: are the vesicles closer than a set distance?

	// Issue the CLogVesicleApproach message the first time this is true; 
	// if the event has already occurred check to see if the vesicles have 
	// moved apart again, in which 
	// case reset the event flag. We don't issue another message because then we
	// can use the messages to find all times at which the vesicle approached the
	// bilayer without having to subtract off the times it passed out of range.

	if(m_CMSeparation < m_MaxCMApproach)
	{
		if(!m_bVesicleApproach)
		{
			m_bVesicleApproach = true;

			pISimBox->SaveCurrentState();

			CLogVesicleApproach* pMsg = new CLogVesicleApproach(pISimBox->GetCurrentTime(), m_AggregateName1, m_AggregateId1, 
																m_AggregateName2, m_AggregateId2, m_CMSeparation);
		}

		// ****************************************
		// Fusion stage 2: do the outer leaflets touch? 

		// Prepare for monolayer mixing by setting a flag showing which 
		// BLM monolayer is closest to the vesicle.

		if(!m_bVesicleDistalTouch)
		{
			// Store the polymer types of the BLM and vesicle major components and 
			// their head and tail bead types: we cannot do this in the 
			// ValidateData() method because the aggregates have not called their 
			// ConvertNames() method. We use the initial value of -1 to avoid
			// continually re-calculating their values.
			// We also store a flag showing whether the vesicle is above the BLM
			// or vice-versa. As they cannot pass through each other, we only need
			// to do this once.

			if(m_BLMLipidType == -1)
			{
				m_BLMLipidType			= m_pBLM->GetMajorLipidType();
				m_BLMLipidHeadType		= m_pBLM->GetMajorLipidHeadType();
				m_BLMLipidTailType		= m_pBLM->GetMajorLipidTailType();

				m_VesicleLipidType		= m_pVesicle->GetMajorLipidType();
				m_VesicleLipidHeadType	= m_pVesicle->GetMajorLipidHeadType();
				m_VesicleLipidTailType	= m_pVesicle->GetMajorLipidTailType();		

				// Find out whether the vesicle is above the BLM or below it using the
				// CM separation in the direction of the BLM normal.

				if(vcm[0]*static_cast<double>(m_pBLM->GetXNormal()) +
				   vcm[1]*static_cast<double>(m_pBLM->GetYNormal()) +
				   vcm[2]*static_cast<double>(m_pBLM->GetZNormal()) < 0.0)
				{
					// The outer BLM monolayer is closest to the vesicle, so use
					// the "1" monolayer coordinates, e.g., m_OuterHeight1, etc.

					m_bVesicleAboveBLM = true;
				}
				else
				{
					m_bVesicleAboveBLM = false;
				}
			}

			// Store the vesicle CM coordinate in the direction normal to the BLM

			if(m_pBLM->GetXNormal() == 1)
			{
				m_VesicleNormalCMCoord = m_pVesicle->GetCMXPos();
			}
			else if(m_pBLM->GetYNormal() == 1)
			{
				m_VesicleNormalCMCoord = m_pVesicle->GetCMYPos();
			}
			else if(m_pBLM->GetZNormal() == 1)
			{
				m_VesicleNormalCMCoord = m_pVesicle->GetCMZPos();
			}

			// Calculate the distance of closest approach of the bilayer and vesicle
			// outer monolayers and output a message to the log file. If the separation
			// increases beyond m_MaxDistalTouch then reset the flag to false.

			if(m_bVesicleAboveBLM)
			{
				m_OuterSeparation = m_VesicleNormalCMCoord - m_pVesicle->GetRadius() - m_pBLM->GetOuterHeadHeight();
			}
			else
			{
				m_OuterSeparation = m_pBLM->GetInnerHeadHeight() - m_VesicleNormalCMCoord - m_pVesicle->GetRadius();
			}

			if(m_OuterSeparation < m_MaxDistalTouch)
			{
				m_bVesicleDistalTouch = true;

				pISimBox->SaveCurrentState();

				CLogVesicleDistalTouch* pMsg = new CLogVesicleDistalTouch(pISimBox->GetCurrentTime(), m_AggregateName1, m_AggregateId1, 
																			  m_AggregateName2, m_AggregateId2, m_OuterSeparation);
			}
		}
		else if(m_OuterSeparation > m_MaxDistalTouch)
		{
			m_bVesicleDistalTouch = false;
		}
		else
		{
			// ****************************************
			// Fusion stage 3: Local perturbation and mixing of BLM-Vesicle outer leaflets

			// We check to see if the BLM lipids and vesicle lipids are positioned
			// close together in space.  We do not consider demixing as it is 
			// extremely unlikely that the BLM and vesicle lipids will separate 
			// once they have mixed.

			// Write out the density profiles for BLM and vesicle head beads

			WriteDensityProfile(pISimBox);

			if(!m_bVesicleDistalMix)	
			{
				double blmMonoHeight = 0.0;
				double vesMonoHeight = 0.0;
				long   blmMonoIndex	 = 0;
				long   vesMonoIndex	 = 0;

				if(m_bVesicleAboveBLM)
				{
					blmMonoHeight = m_pBLM->GetOuterHeadHeight();
					vesMonoHeight = m_VesicleNormalCMCoord - m_pVesicle->GetRadius();
				}
				else
				{
					blmMonoHeight = m_pBLM->GetInnerHeadHeight();
					vesMonoHeight = m_VesicleNormalCMCoord + m_pVesicle->GetRadius();
				}

				// Create a slice through the CSimBox from the height of the lipid 
				// head coordinates of the BLM leaflet proximal to the vesicle to the
				// head coordinates of the closest vesicle leaflet, and search these
				// slices for lipid head and tail beads from both the BLM and vesicle:
				// we assume the bead types are disjoint so that we can distinguish
				// which beads belong to the BLM lipids and which to the vesicle lipids.
				//
				// The CSlice object allows its contained bead list to be searched 
				// using the count_if algorithm and a function object. We look for a 
				// slice that contains at least m_MinMixThreshold of both BLM and 
				// vesicle lipid head beads and which contains more than any other 
				// such slice. When found, this slice is taken as the location of 
				// the merged proximal leaflets.
				
				if(m_pBLM->GetXNormal() == 1)
				{
					blmMonoIndex = static_cast<long>(blmMonoHeight/pISimBox->GetCNTXCellWidth());
					vesMonoIndex = static_cast<long>(vesMonoHeight/pISimBox->GetCNTXCellWidth());
				}
				else if(m_pBLM->GetYNormal() == 1)
				{
					blmMonoIndex = static_cast<long>(blmMonoHeight/pISimBox->GetCNTYCellWidth());
					vesMonoIndex = static_cast<long>(vesMonoHeight/pISimBox->GetCNTYCellWidth());
				}
				else if(m_pBLM->GetZNormal() == 1)
				{
					blmMonoIndex = static_cast<long>(blmMonoHeight/pISimBox->GetCNTZCellWidth());
					vesMonoIndex = static_cast<long>(vesMonoHeight/pISimBox->GetCNTZCellWidth());
				}

				if(m_bVesicleAboveBLM)
				{
					m_OuterLeafletMixTotal = 0;

					long bindex = blmMonoIndex;

					while(bindex <= vesMonoIndex)
					{
						CSlice blmLeaflet(0, 0, bindex, pISimBox);
						BeadList lBeads = blmLeaflet.GetBeads();

//						cBeadListIterator iterBead1 = find_if(lBeads.begin(), lBeads.end(), aaBeadType(m_BLMLipidHeadType));
//						cBeadListIterator iterBead2 = find_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));

						long blmTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_BLMLipidHeadType));
						long vesTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));
						long mixTotal = blmTotal + vesTotal;

						std::cout << "bindex = " << bindex << " " << blmTotal << " " << vesTotal << zEndl;

						if(blmTotal >= m_MinMixThreshold && vesTotal >= m_MinMixThreshold &&
							mixTotal > m_OuterLeafletMixTotal)
						{
							m_bVesicleDistalMix	   = true;
							m_OuterLeafletMixTotal = mixTotal;
							m_MergedProximalIndex  = bindex;

							std:: cout << "Found slice " << m_MergedProximalIndex << " with both lipids " << blmTotal << " " << vesTotal << zEndl;
						}

						bindex++;
					}
				}
				else
				{
					m_OuterLeafletMixTotal = 0;

					long bindex = vesMonoIndex;

					while(bindex <= blmMonoIndex)
					{
						CSlice blmLeaflet(0, 0, bindex, pISimBox);
						BeadList lBeads = blmLeaflet.GetBeads();

						long blmTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_BLMLipidHeadType));
						long vesTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));
						long mixTotal = blmTotal + vesTotal;

						std::cout << "bindex = " << bindex << " " << blmTotal << " " << vesTotal << zEndl;

						if(blmTotal >= m_MinMixThreshold && vesTotal >= m_MinMixThreshold &&
							mixTotal > m_OuterLeafletMixTotal)
						{
							m_bVesicleDistalMix	   = true;
							m_OuterLeafletMixTotal = mixTotal;
							m_MergedProximalIndex  = bindex;

							std:: cout << "Found slice " << m_MergedProximalIndex << " with both lipids " << blmTotal << " " << vesTotal << zEndl;
						}

						bindex++;
					}
				}

				// ****************************************
				// Now that the vesicle and BLM proximal leaflets have merged,
				// schedule a ccSetCommandTimer to group commands to
				// select a ring of lipids in the merged leaflet and apply a 
				// radial force to them. We do this by using a cylinder with a 
				// height only of two lipids lengths.

				// Store the simulation time at which the commands are scheduled:
				// We add 1 to the time to allow for the timer command being added
				// to the next time step instead of the current one. Because processes
				// are sampled after the commands, we cannot add a new command to 
				// the current time step.

				if(m_bVesicleDistalMix)
				{
					const long	stretchTime = pISimBox->GetCurrentTime() + m_StretchDelay + 1;

					// We need a "unique" name to identify the command targets: each target
					// holds one bead type from the major lipid in the BLM and vesicle

					const zString targetName1 = "fusion" + ToString(GetId()) + "_BLM_H_";
					const zString targetName2 = "fusion" + ToString(GetId()) + "_BLM_T_";
					const zString targetName3 = "fusion" + ToString(GetId()) + "_VES_H_";
					const zString targetName4 = "fusion" + ToString(GetId()) + "_VES_T_";

					const zString decLabel1   = targetName1 + "RadialForce";
					const zString decLabel2   = targetName2 + "RadialForce";
					const zString decLabel3   = targetName3 + "RadialForce";
					const zString decLabel4   = targetName4 + "RadialForce";

					// the type of the lipid head and tail beads in the blm and vesicle

					const long      blmHeadType = m_pBLM->GetMajorLipidHeadType();
					const long      blmTailType = m_pBLM->GetMajorLipidTailType();
					const long      vesHeadType = m_pVesicle->GetMajorLipidHeadType();
					const long      vesTailType = m_pVesicle->GetMajorLipidTailType();

					const zString   blmHeadBeadName = rSimState.cGetAnalysisState().GetBeadNameFromType(blmHeadType);
					const zString   blmTailBeadName = rSimState.cGetAnalysisState().GetBeadNameFromType(blmTailType);
					const zString   vesHeadBeadName = rSimState.cGetAnalysisState().GetBeadNameFromType(vesHeadType);
					const zString   vesTailBeadName = rSimState.cGetAnalysisState().GetBeadNameFromType(vesTailType);

					std::cout << "Selecting beads " << blmHeadBeadName << " " << blmTailBeadName << " " << vesHeadBeadName << " " << vesTailBeadName << zEndl;

					// the new type identifier for the changed beads

	//				const long		firstType	= rSimState.GetBeadTypeTotal();
	//				const long		secondType	= firstType;

					// blm normal
					const long xn = m_pBLM->GetXNormal();
					const long yn = m_pBLM->GetYNormal();
					const long zn = m_pBLM->GetZNormal();

					// the centre of the annulus within which beads will be changed,
					// expressed as fractions of the SimBox side lengths

					double xc = 0.0;
					double yc = 0.0;
					double zc = 0.0;

					if(m_pBLM->GetXNormal() == 1)
					{
						xc = static_cast<double>(m_MergedProximalIndex)/static_cast<double>(pISimBox->GetCNTXCellNo());
						yc = 0.5;
						zc = 0.5;
					}
					else if(m_pBLM->GetYNormal() == 1)
					{
						xc = 0.5;
						yc = static_cast<double>(m_MergedProximalIndex)/static_cast<double>(pISimBox->GetCNTYCellNo());
						zc = 0.5;
					}
					else if(m_pBLM->GetZNormal() == 1)
					{
						xc = 0.5;
						yc = 0.5;
						zc = static_cast<double>(m_MergedProximalIndex)/static_cast<double>(pISimBox->GetCNTZCellNo());
					}

					std::cout << "Applying radial force at " << xc << " " << yc << " " << zc << zEndl;

					// Create the commands to stretch a ring of lipid radially outward: I don't think the
					// zc component matters given the z normal axis, but it should probably be 0.5.

					ccSelectBeadTypeInCylinder* pCmd1 = new ccSelectBeadTypeInCylinder(stretchTime, targetName1,
																blmHeadBeadName, xn, yn, zn, xc, yc, zc,
																m_HalfLength, m_InnerRadius, m_OuterRadius);

					ccSelectBeadTypeInCylinder* pCmd2 = new ccSelectBeadTypeInCylinder(stretchTime, targetName2,
																blmTailBeadName, xn, yn, zn, xc, yc, zc,
																m_HalfLength, m_InnerRadius, m_OuterRadius);

					ccSelectBeadTypeInCylinder* pCmd3 = new ccSelectBeadTypeInCylinder(stretchTime, targetName3,
																vesHeadBeadName, xn, yn, zn, xc, yc, zc,
																m_HalfLength, m_InnerRadius, m_OuterRadius);

					ccSelectBeadTypeInCylinder* pCmd4 = new ccSelectBeadTypeInCylinder(stretchTime, targetName4,
																vesTailBeadName, xn, yn, zn, xc, yc, zc,
																m_HalfLength, m_InnerRadius, m_OuterRadius);

	//				ctChangeBeadType*           pCmd2 = new ctChangeBeadType(condenseTime, targetName);
	//				ccSetDPDBeadConsIntByType*  pCmd3 = new ccSetDPDBeadConsIntByType(condenseTime, firstType, secondType, m_ConsInt);

					ctRadialForceOnTarget*		pCmd5 = new ctRadialForceOnTarget(stretchTime, targetName1, decLabel1, xn, yn, zn, xc, yc, zc, m_RadialForceMag);
					ctRadialForceOnTarget*		pCmd6 = new ctRadialForceOnTarget(stretchTime, targetName2, decLabel2, xn, yn, zn, xc, yc, zc, m_RadialForceMag);
					ctRadialForceOnTarget*		pCmd7 = new ctRadialForceOnTarget(stretchTime, targetName3, decLabel3, xn, yn, zn, xc, yc, zc, m_RadialForceMag);
					ctRadialForceOnTarget*		pCmd8 = new ctRadialForceOnTarget(stretchTime, targetName4, decLabel4, xn, yn, zn, xc, yc, zc, m_RadialForceMag);

					// Define commands to remove the command target activities that
					// create a force on the target

					ctRemoveCommandTargetActivity* pCmd9  = new ctRemoveCommandTargetActivity(m_StretchDelay + m_StretchDuration, decLabel1);
					ctRemoveCommandTargetActivity* pCmd10 = new ctRemoveCommandTargetActivity(m_StretchDelay + m_StretchDuration, decLabel2);
					ctRemoveCommandTargetActivity* pCmd11 = new ctRemoveCommandTargetActivity(m_StretchDelay + m_StretchDuration, decLabel3);
					ctRemoveCommandTargetActivity* pCmd12 = new ctRemoveCommandTargetActivity(m_StretchDelay + m_StretchDuration, decLabel4);

					// Now add the commands to a ccSetCommandTimer instance: we use
					// two timers, the first one sets up the stretching force and the
					// second turns it off.

					ccSetCommandTimer* pTimer1 = new ccSetCommandTimer(pISimBox->GetCurrentTime()+1);

					pTimer1->SetDelay(m_StretchDelay);
					pTimer1->AddCommand(pCmd1);
					pTimer1->AddCommand(pCmd2);
					pTimer1->AddCommand(pCmd3);
					pTimer1->AddCommand(pCmd4);
					pTimer1->AddCommand(pCmd5);
					pTimer1->AddCommand(pCmd6);
					pTimer1->AddCommand(pCmd7);
					pTimer1->AddCommand(pCmd8);

					ccSetCommandTimer* pTimer2 = new ccSetCommandTimer(pISimBox->GetCurrentTime()+1);

					pTimer2->SetDelay(m_StretchDelay + m_StretchDuration);
					pTimer2->AddCommand(pCmd9);
					pTimer2->AddCommand(pCmd10);
					pTimer2->AddCommand(pCmd11);
					pTimer2->AddCommand(pCmd12);

					// Add the timer commands to the SimBox's command sequence

					pISimBox->AddCommand(pTimer1);
					pISimBox->AddCommand(pTimer2);

					// ****************************************

					// Log the first contact of vesicle and blm

					pISimBox->SaveCurrentState();

					CLogVesicleDistalMix* pMsg = new CLogVesicleDistalMix(pISimBox->GetCurrentTime(), m_AggregateName1, m_AggregateId1, 
																		  m_AggregateName2, m_AggregateId2);
				}				
			}

			// Once the distal monolayers have mixed check the next stages of fusion

			if(m_bVesicleDistalMix)
			{
				// ****************************************
				// Fusion stage 4: Stalk formation and mixing of inner leaflets: we 
				// check to see if any vesicle lipids have appeared in the bilayer
				// inner leaflet. We use the lipid heads for the test and only search
				// one CNT slice defined by m_MergedProximalIndex.
				
				CSlice blmLeaflet(0, 0, m_MergedProximalIndex, pISimBox);

				// Is it sufficient to use a single CNT slice here?
				// If slice contains at least m_MinMixThreshold lipid head beads 
				// from the vesicle mixing has occurred

				BeadList lBeads = blmLeaflet.GetBeads();

				cBeadListIterator iterBead1 = find_if(lBeads.begin(), lBeads.end(), aaBeadType(m_BLMLipidHeadType));
				cBeadListIterator iterBead2 = find_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));

				m_InnerLeafletMixTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));

				std::cout << "Searching innner leaflets, found " << m_InnerLeafletMixTotal << zEndl;

				if(!m_bVesicleProximalMix && iterBead1!=lBeads.end() && iterBead2!=lBeads.end() && m_InnerLeafletMixTotal >= m_MinMixThreshold)	
				{
					m_bVesicleProximalMix = true;

					pISimBox->SaveCurrentState();

					CLogVesicleProximalMix* pMsg = new CLogVesicleProximalMix(pISimBox->GetCurrentTime(), m_AggregateName1, m_AggregateId1, 
																		  m_AggregateName2, m_AggregateId2);
				}

				// If the stalk has formed check for its expansion and rupture

				if(m_bVesicleProximalMix)
				{
					// ****************************************
					// Fusion Stage 5: Fusion pore forms and connects the vesicle interior to the BLM reservoir 

					if(m_pBLM->IsPoreOpen())
					{
						m_PoreSize = m_pBLM->GetPoreSize();


					}
					else
					{
						m_PoreSize = 0;
					}

				}
			}
		}
	}
	else if(m_bVesicleApproach)
	{
		// If the vesicle has moved away from the BLM reset both the CM separation
		// flag and the outer leaflet separation flag: this assumes that it is not
		// possible for the outer leaflets to be within their maximum separation 
		// unless the CM separation is within its limit.

			std::cout << "Vesicle has moved away at " << pISimBox->GetCurrentTime() << zEndl;

		m_bVesicleApproach = false;
		m_bVesicleDistalTouch = false;
	}


	// Define the data to be output to the process file: depending on
	// how many stages of fusion have occurred more data is written to 
	// the file. Data that corresponds to stages not yet observed are
	// written as zero.

	long dataTotal = 6;

	CTimeSeriesData* const pTSD = new CTimeSeriesData(dataTotal);

	pTSD->SetValue(0, pISimBox->GetCurrentTime(), "Time");
	pTSD->SetValue(1, m_CMSeparation,			  "CMSeparation");
	pTSD->SetValue(2, m_OuterSeparation,		  "OuterSeparation");
	pTSD->SetValue(3, m_OuterLeafletMixTotal,	  "OuterMixTotal");
	pTSD->SetValue(4, m_InnerLeafletMixTotal,	  "InnerMixTotal");
	pTSD->SetValue(5, m_PoreSize,				  "PoreSize");

	m_pState->AddTimeSeriesData(pTSD);


}

// Store a pointer to the CAnalysis-derived object that the process
// will monitor for activity during the simulation. This is const
// because we don't allow data to be written back to the aggregate.
// If more than one aggregate is needed we need to add more functions.

void prBLMVesicleFusion::SetAggregate(const CAnalysis* pAggregate1, const CAnalysis* pAggregate2)
{
	m_pBLM     = new IBilayerFusion<CBilayer>(reinterpret_cast<const CBilayer*>(pAggregate1));
	m_pVesicle = new IVesicleFusion<CVesicle>(reinterpret_cast<const CVesicle*>(pAggregate2));
}

// No external events are defined for this process.

void prBLMVesicleFusion::SetEvent()
{
}

// Function to check that the user-specified data is valid and, if so, 
// to find the aggregates and events that are used by the process.
//
// An xxProcessState is created to hold the data that the process wants
// to write to file. Data is passed as a series of CTimeSeriesData objects
// as used for CHistoryState. Because this function is called after the
// original xxProcess instance is copied (so that the xxProcessObject instance
// can be discarded), creating the xxAggregateState here does not result in
// it being destroyed. Hence, we can write the XML opening tags to the file safely.

bool prBLMVesicleFusion::ValidateData(const CInputData &riData)
{
	// Do the specified aggregates exist? If so, store pointers to them

	cAggregateIterator cIterAgg1 = find_if(riData.GetAggregates().begin(), 
										   riData.GetAggregates().end(), aaGetAggregateId(m_AggregateId1));

	cAggregateIterator cIterAgg2 = find_if(riData.GetAggregates().begin(), 
										   riData.GetAggregates().end(), aaGetAggregateId(m_AggregateId2));

	if(cIterAgg1 != riData.GetAggregates().end() && (*cIterAgg1)->GetType() == m_AggregateName1 &&
	   cIterAgg2 != riData.GetAggregates().end() && (*cIterAgg2)->GetType() == m_AggregateName2)
		SetAggregate(*cIterAgg1, *cIterAgg2);
	else
		return false;

	// All data has been validated so create and store an xxProcessState object
	// to allow the xxProcess to write its data to a process state file.

	// The process state's file name depends on whether it is XML-enabled or not,
	// so we use two different SetState() signatures to allow for this. If it
	// is XML-enabled, we write out the standard processing instructions and
	// wrapper tags <ProcessState></ProcessState> as the first and last elements 
	// in the file. Because the process state can write data until the simulation 
	// ends, we only write the end tag in the base class's destructor.


	// Create a file object to hold the bead density profiles


    m_pDensityFile = new xxProcessState(xxBase::GetPSDFPrefix() + GetProcessType() + ToString(GetId()) + "." + riData.GetRunId(), GetStartTime(), GetEndTime(), riData.GetRunId(), GetProcessType());


#if EnableXMLProcesses == SimXMLEnabled

    SetState(new xxProcessState(xxBase::GetPSPrefix() + GetProcessType() + ToString(GetId()) + "." + riData.GetRunId() + ".xml", GetStartTime(), GetEndTime(), riData.GetRunId(), GetProcessType()));

	// Note that the opening <Header> tag is written in the xxProcessState class
	// but the closing tag is written here. This is a hack.

	zOutStream& os = m_pState->putXMLStartTags();
	os << "<Aggregate><Name>"	<< m_AggregateName1		<< "</Name><Id>"		<< m_AggregateId1 << "</Id></Aggregate>" << zEndl;
	os << "<Aggregate><Name>"	<< m_AggregateName2		<< "</Name><Id>"		<< m_AggregateId2 << "</Id></Aggregate>" << zEndl;
	os << "<MaxCMApproach>"		<< m_MaxCMApproach		<< "</MaxCMApproach>"	<< zEndl;
	os << "<MaxDistalTouch>"	<< m_MaxDistalTouch		<< "</MaxDistalTouch>"	<< zEndl;
	os << "<MinMixThreshold>"	<< m_MinMixThreshold	<< "</MinMixThreshold>"	<< zEndl;
	os << "<MinPoreSize>"		<< m_MinPoreSize		<< "</MinPoreSize>"		<< zEndl;
	os << "<MinFusionPoreSize>"	<< m_MinFusionPoreSize  << "</MinFusionPoreSize>"<< zEndl;
	os << "<CondenseDelay>"		<< m_CondenseDelay		<< "</CondenseDelay>"	<< zEndl;
	os << "<CondenseDuration>"  << m_CondenseDuration	<< "</CondenseDuration>"<< zEndl;
	os << "<StretchDelay>"		<< m_StretchDelay		<< "</StretchDelay>"	<< zEndl;
	os << "<StretchDuration>"	<< m_StretchDuration	<< "</StretchDuration>"	<< zEndl;
	os << "<InnerRadius>"		<< m_InnerRadius		<< "</InnerRadius>"		<< zEndl;
	os << "<OuterRadius>"		<< m_OuterRadius		<< "</OuterRadius>"		<< zEndl;
	os << "<HalfLength>"		<< m_HalfLength			<< "</HalfLength>"		<< zEndl;
	os << "<RadialForce>"		<< m_RadialForceMag		<< "</RadialForce>"		<< zEndl;
	os << "</Header>" << zEndl;

#elif EnableXMLProcesses == SimXMLDisabled

	SetState(new xxProcessState(xxBase::GetPSPrefix() + GetProcessType() + ToString(GetId()) + "." + riData.GetRunId(), GetStartTime(), GetEndTime(), riData.GetRunId(), GetProcessType()));

	zOutStream& os = m_pState->putASCIIStartTags();
	os << "    Aggregate			" << m_AggregateName1	 << "  " << m_AggregateId1 << zEndl;
	os << "    Aggregate			" << m_AggregateName2	 << "  " << m_AggregateId2 << zEndl;
	os << "    MaxCMApproach		" << m_MaxCMApproach     << zEndl;
	os << "    MaxDistalTouch		" << m_MaxDistalTouch	 << zEndl;
	os << "    MinMixThreshold		" << m_MinMixThreshold	 << zEndl;
	os << "    MinPoreSize			" << m_MinPoreSize		 << zEndl;
	os << "    MinFusionPoreSize	" << m_MinFusionPoreSize << zEndl;
	os << "    CondenseDelay		" << m_CondenseDelay	 << zEndl;
	os << "    CondenseDuration		" << m_CondenseDuration	 << zEndl;
	os << "    StretchDelay			" << m_StretchDelay		 << zEndl;
	os << "    StretchDuration		" << m_StretchDuration	 << zEndl;
	os << "    InnerRadius			" << m_InnerRadius		 << zEndl;
	os << "    OuterRadius			" << m_OuterRadius		 << zEndl;
	os << "    HalfLength			" << m_HalfLength		 << zEndl;
	os << "    RadialForce			" << m_RadialForceMag	 << zEndl;

#endif

	return true;
}

// ****************************************
// Implementation of IModifyBLMVesicleFusion interface

void prBLMVesicleFusion::SetMaxCMApproach(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetMaxCMApproach* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetMaxCMApproach*>(pCommand);

	const zString pid   = pCmd->GetPid();
	const double distance = pCmd->GetMaxCMApproach();

	if(pid == GetPid() && IsModifiable() && distance > 0.0)
	{
		m_MaxCMApproach = distance;

		std::cout << "setting max CM approach to " << distance << zEndl;

//		CLogpcBLMVesicleFusionSetMaxCMApproach* pMsg = new CLogpcBLMVesicleFusionSetMaxCMApproach(pCmd->GetExecutionTime(), pid, distance);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetMaxDistalTouch(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetMaxDistalTouch* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetMaxDistalTouch*>(pCommand);

	const zString pid   = pCmd->GetPid();
	const double distance = pCmd->GetMaxDistalTouch();

	if(pid == GetPid() && IsModifiable() && distance > 0.0)
	{
		m_MaxDistalTouch = distance;

		std::cout << "setting max distal touch to " << distance << zEndl;

//		CLogpcBLMVesicleFusionSetMaxDistalTouch* pMsg = new CLogpcBLMVesicleFusionSetMaxDistalTouch(pCmd->GetExecutionTime(), pid, distance);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetMinMixThreshold(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetMinMixThreshold* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetMinMixThreshold*>(pCommand);

	const zString pid        = pCmd->GetPid();
	const long  mixThreshold = pCmd->GetMinMixThreshold();
	
	if(pid == GetPid() && IsModifiable() && mixThreshold >= 0)
	{
		m_MinMixThreshold = mixThreshold;

		std::cout << "setting minimum pore size to " << mixThreshold << zEndl;

//		CLogpcBLMVesicleFusionSetMinMixThreshold* pMsg =CLogpcBLMVesicleFusionSetMinMixThreshold(pCmd->GetExecutionTime(), pid, mixThreshold);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetMinPoreSize(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetMinPoreSize* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetMinPoreSize*>(pCommand);

	const zString pid    = pCmd->GetPid();
	const long  poreSize = pCmd->GetMinPoreSize();
	
	if(pid == GetPid() && IsModifiable() && poreSize >= 0)
	{
		m_MinPoreSize = poreSize;

		std::cout << "setting minimum pore size to " << poreSize << zEndl;

//		CLogpcBLMVesicleFusionSetMinPoreSize* pMsg = new CLogpcBLMVesicleFusionSetMinPoreSize(pCmd->GetExecutionTime(), pid, poreSize);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetMinFusionPoreSize(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetMinFusionPoreSize* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetMinFusionPoreSize*>(pCommand);

	const zString pid    = pCmd->GetPid();
	const long  poreSize = pCmd->GetMinFusionPoreSize();
	
	if(pid == GetPid() && IsModifiable() && poreSize >= 0)
	{
		m_MinFusionPoreSize = poreSize;

		std::cout << "setting minimum fusion pore size to " << poreSize << zEndl;

//		CLogpcBLMVesicleFusionSetMinFusionPoreSize* pMsg = new CLogpcBLMVesicleFusionSetMinFusionPoreSize(pCmd->GetExecutionTime(), pid, poreSize);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetCondenseDelay(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetCondenseDelay* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetCondenseDelay*>(pCommand);

	const zString pid = pCmd->GetPid();
	const long  delay = pCmd->GetDelay();
	
	if(pid == GetPid() && IsModifiable() && delay >= 0)
	{
		m_CondenseDelay = delay;

		std::cout << "setting condense delay to " << delay << zEndl;

		CLogpcBLMVesicleFusionSetCondenseDelay* pMsg = new CLogpcBLMVesicleFusionSetCondenseDelay(pCmd->GetExecutionTime(), pid, delay);

	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetCondenseDuration(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetCondenseDuration* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetCondenseDuration*>(pCommand);

	const zString pid    = pCmd->GetPid();
	const long  duration = pCmd->GetDuration();
	
	if(pid == GetPid() && IsModifiable() && duration >= 0)
	{
		m_CondenseDuration = duration;

		std::cout << "setting condense duration to " << duration << zEndl;

//		CLogpcBLMVesicleFusionSetCondenseDuration* pMsg = new CLogpcBLMVesicleFusionSetCondenseDuration(pCmd->GetExecutionTime(), pid, duration);

	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetStretchDelay(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetStretchDelay* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetStretchDelay*>(pCommand);

	const zString pid = pCmd->GetPid();
	const long  delay = pCmd->GetDelay();

	if(pid == GetPid() && IsModifiable() && delay >= 0)
	{
		m_StretchDelay = delay;

		std::cout << "setting stretch delay to " << delay << zEndl;

		CLogpcBLMVesicleFusionSetStretchDelay* pMsg = new CLogpcBLMVesicleFusionSetStretchDelay(pCmd->GetExecutionTime(), pid, delay);

	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetStretchDuration(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetStretchDuration* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetStretchDuration*>(pCommand);

	const zString pid    = pCmd->GetPid();
	const long  duration = pCmd->GetDuration();

	if(pid == GetPid() && IsModifiable() && duration >= 0)
	{
		m_StretchDuration = duration;

		std::cout << "setting stretch duration to " << duration << zEndl;

		CLogpcBLMVesicleFusionSetStretchDuration* pMsg = new CLogpcBLMVesicleFusionSetStretchDuration(pCmd->GetExecutionTime(), pid, duration);

	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetInnerRadius(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetInnerRadius* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetInnerRadius*>(pCommand);

	const zString pid   = pCmd->GetPid();
	const double radius = pCmd->GetInnerRadius();

	if(pid == GetPid() && IsModifiable() && radius > 0.0)
	{
		m_InnerRadius = radius;

		std::cout << "setting inner radius to " << radius << zEndl;

//		CLogpcBLMVesicleFusionSetInnerRadius* pMsg = new CLogpcBLMVesicleFusionSetInnerRadius(pCmd->GetExecutionTime(), pid, radius);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetOuterRadius(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetOuterRadius* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetOuterRadius*>(pCommand);

	const zString pid   = pCmd->GetPid();
	const double radius = pCmd->GetOuterRadius();

	if(pid == GetPid() && IsModifiable() && radius > 0.0)
	{
		m_OuterRadius = radius;

		std::cout << "setting outer radius to " << radius << zEndl;

//		CLogpcBLMVesicleFusionSetOuterRadius* pMsg = new CLogpcBLMVesicleFusionSetOuterRadius(pCmd->GetExecutionTime(), pid, radius);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetHalfLength(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetHalfLength* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetHalfLength*>(pCommand);

	const zString      pid  = pCmd->GetPid();
	const double halfLength = pCmd->GetHalfLength();

	if(pid == GetPid() && IsModifiable() && halfLength > 0.0)
	{
		m_HalfLength = halfLength;

		std::cout << "setting half length to " << halfLength << zEndl;

//		CLogpcBLMVesicleFusionSetHalfLength* pMsg = new CLogpcBLMVesicleFusionSetHalfLength(pCmd->GetExecutionTime(), pid, halfLength);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}

void prBLMVesicleFusion::SetRadialForceMagnitude(const xxCommand* const pCommand)
{
	const pcBLMVesicleFusionSetRadialForce* const pCmd = dynamic_cast<const pcBLMVesicleFusionSetRadialForce*>(pCommand);

	const zString pid = pCmd->GetPid();
	const double mag  = pCmd->GetRadialForce();

	if(pid == GetPid() && IsModifiable())
	{
		m_RadialForceMag = mag;

		std::cout << "setting radial force to " << mag << zEndl;

//		CLogpcBLMVesicleFusionSetRadialForce* pMsg = new CLogpcBLMVesicleFusionSetRadialForce(pCmd->GetExecutionTime(), pid, mag);
	}
	else
	{
		CLogCommandFailed* pMsg = new CLogCommandFailed(pCmd->GetExecutionTime(), pCmd);
	}
}


void prBLMVesicleFusion::WriteDensityProfile(const ISimBox* const pISimBox)
{
	// Use the axis which is along the bilayer normal for the profile

	long startIndex = 0;
	long endIndex = 0;

	if(m_pBLM->GetXNormal() == 1)
	{
		endIndex = pISimBox->GetCNTXCellNo();
	}
	else if(m_pBLM->GetYNormal() == 1)
	{
		endIndex = pISimBox->GetCNTYCellNo();
	}
	else if(m_pBLM->GetZNormal() == 1)
	{
		endIndex = pISimBox->GetCNTZCellNo();
	}

	long bindex = startIndex;

	std::cout << "CM sep    " << m_CMSeparation << zEndl;
	std::cout << "Outer sep " << m_OuterSeparation << zEndl;
	std::cout << "starting write of density..." << zEndl;

	while(bindex < endIndex)
	{
		CSlice blmLeaflet(0, 0, bindex, pISimBox);
		BeadList lBeads = blmLeaflet.GetBeads();

		long blmTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_BLMLipidHeadType));
		long vesTotal = count_if(lBeads.begin(), lBeads.end(), aaBeadType(m_VesicleLipidHeadType));

		m_pDensityFile->WriteRawData(blmTotal, vesTotal);

		std::cout << "bindex = " << bindex << " " << blmTotal << " " << vesTotal << zEndl;

		bindex++;
	}

	m_pDensityFile->WriteRawEndline();
	m_pDensityFile->WriteRawEndline();

}

// ****************************************
// Forwarding functions to the base class' implementation of IModifyProcess interface

bool prBLMVesicleFusion::IsModifiable() const
{
	return InternalIsModifiable();
}

void prBLMVesicleFusion::SetModifiable(const xxCommand* const pCommand)
{
	return InternalSetModifiable(pCommand);
}

void prBLMVesicleFusion::SetUnmodifiable(const xxCommand* const pCommand)
{
	return InternalSetUnmodifiable(pCommand);
}

// Function to allow the process to prevent any further modifications to itself.
// Note that a warning is logged if this command is sent more than once to the
// same process.

void prBLMVesicleFusion::SetIrreversibleUnmodifiable(const xxCommand* const pCommand)
{	
	return InternalSetIrreversibleUnmodifiable(pCommand);
}

