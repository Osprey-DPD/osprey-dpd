/* **********************************************************************
Copyright 2020  Dr. J. C. Shillcock and Prof. Dr. R. Lipowsky, Director at the Max Planck Institute (MPI) of Colloids and Interfaces; Head of Department Theory and Bio-Systems.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************************************** */
// prBeadVelocityScalarProduct1dProfile.cpp: implementation of the prBeadVelocityScalarProduct1dProfile class.
//
//////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "SimDefs.h"
#include "SimMathFlags.h"
#include "SimAlgorithmFlags.h"
#include "SimXMLFlags.h"
#include "prBeadVelocityScalarProduct1dProfile.h"
#include "IGlobalSimBox.h"
#include "SimState.h"
#include "ISimBox.h"
#include "Bead.h"
#include "TimeSeriesData.h"
#include "InputData.h"


// Commands generated by the process



// STL using declarations


//////////////////////////////////////////////////////////////////////
// Global members
//////////////////////////////////////////////////////////////////////

// Static member variable containing the identifier for this process. 
// The static member function GetType() is invoked by the xxProcessObject 
// to compare the type read from the control data file with each
// xxProcess-derived class so that it can create the appropriate object 
// to hold the process data.
//
    
const zString prBeadVelocityScalarProduct1dProfile::m_Type = "BeadVelocityScalarProduct1dProfile";

const zString prBeadVelocityScalarProduct1dProfile::GetType()
{
	return m_Type;
}

// We use an anonymous namespace to wrap the call to the factory object
// so that it is not accessible from outside this file. The identifying
// string is stored in the m_Type static member variable.
//
// Note that the Create() function is not a member function but a global 
// function hidden in the namespace.

namespace
{
	xxProcess* Create() {return new prBeadVelocityScalarProduct1dProfile();}

	const zString id = prBeadVelocityScalarProduct1dProfile::GetType();

	const bool bRegistered = acfProcessFactory::Instance()->Register(id, Create);
}

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

// Default constructor

prBeadVelocityScalarProduct1dProfile::prBeadVelocityScalarProduct1dProfile() : m_TotalAnalysisPeriods(0),
                                                         m_TotalDataPoints(0),
                                                         m_SamplesTaken(0),
                                                         m_SamplesPerDataPoint(0),
                                                         m_SamplePeriod(0),
                                                         m_BeadTypeTotal(0)
{
    m_vBeadTotals.clear();
    m_vBeadKE.clear();
}

// Constructor for use when the process is created by command. Default values for
// all required parameters must be passed to this constructor. We do NOT check that
// the analysis performed by this process can be completed during the run, nor that
// the number of bead types is constant during the analysis period. If the context
// within which this process operates becomes invalid, the process terminates and 
// logs an error message to the log file.

prBeadVelocityScalarProduct1dProfile::prBeadVelocityScalarProduct1dProfile(const CSimState* const pSimState, 
                              long analysisPeriods,
                              long dataPoints) : m_TotalAnalysisPeriods(analysisPeriods),
                              m_TotalDataPoints(dataPoints),
                              m_SamplesTaken(0),
                              m_BeadTypeTotal(pSimState->GetBeadTypeTotal())
{
    // Set the times at which the process' analysis will be performed. This is
    // defined to be the time from the start of the next full analysis period as
    // defined in the CMonitor until the end of the number of such periods given 
    // by m_TotalAnalysisPeriods.

    long currentTime      = IGlobalSimBox::Instance()->GetCurrentTime();
    long analysisPeriod   = pSimState->GetAnalysisPeriod();
    m_SamplePeriod        = pSimState->GetSamplePeriod();
    long duration         = m_TotalAnalysisPeriods*analysisPeriod;
    long samples          = duration/m_SamplePeriod;
    m_SamplesPerDataPoint = samples/m_TotalDataPoints;

    long start = 0;
    long end   = 0;

    if(currentTime%analysisPeriod == 0)
    {
        start = currentTime;
    }
    else
    {
        start = (currentTime/analysisPeriod + 1)*analysisPeriod;
    }

    end = start + duration;

	SetStartTime(start);
	SetEndTime(end);

    m_vBeadTotals.clear();
    m_vBeadKE.clear();
}

prBeadVelocityScalarProduct1dProfile::~prBeadVelocityScalarProduct1dProfile()
{

}

// Member functions to write/read the data specific to the process.
// The put() function is empty as the base class putASCIIStartTags(), 
// putASCIIEndTags() and their XML equivalents replace its function.

zOutStream& prBeadVelocityScalarProduct1dProfile::put(zOutStream& os) const
{
	return os;
}

zInStream& prBeadVelocityScalarProduct1dProfile::get(zInStream& is)
{
	// Read base class data first

	xxProcess::get(is);

	// No data entry required for this process as it is internal

	return is;
}


// Non-static function to return the type of the process

const zString prBeadVelocityScalarProduct1dProfile::GetProcessType() const
{
	// We return the associated ACN's type so that the ACN and process
	// are guaranteed to return the same string

	return prBeadVelocityScalarProduct1dProfile::GetType();
}

// Function to return a pointer to a copy of the current process.

xxProcess* prBeadVelocityScalarProduct1dProfile::GetProcess() const
{
	return new prBeadVelocityScalarProduct1dProfile(*this);
}

// Function to update the state of the process from the bead data stored in the
// CSimState. It is called every m_SamplePeriod time steps to collect data,
// but defines its own averaging period. We collect the kinetic energies of all 
// beads in the whole SimBox and calculate the kinetic temperatures associated 
// with each bead type. For an equilibrated system, they should all be the same.
// If a bead type is defined but has no instances (which is allowed) we just ignore
// them.
//
// Because beads may have their type changed dynamically and new bead types may
// be created during a simulation, we iterate over all beads calculating the number
// of each type every sample. If the number of beads of each type is not constant
// during this process' analysis we log an error message as the averages will be
// wrong. This method is costly in execution time but requires little permanent storage.
// We expect to use this process only for debugging purposes and checks on the 
// simulation, rather than throughout a whole run.

void prBeadVelocityScalarProduct1dProfile::UpdateState(CSimState& rSimState, const ISimBox* const pISimBox)
{
    // Get the number of bead types: no bead should have a type equal to or greater than
    // this number.

    const long beadTypeTotal = m_vBeadTotals.size();

    if(m_SamplesTaken++ == 0) // First call to this function
    {
        m_vBeadTotals.clear();
        m_vBeadKE.clear();
        m_vBeadTotals.resize(m_BeadTypeTotal, 0);
        m_vBeadKE.resize(m_BeadTypeTotal, 0.0);
    }

    // Add a new sample
    AbstractBeadVector vBeads = pISimBox->GetBeads();

    bool bIllegalBeadType = false;
    long illegalType = -1;

    for(cAbstractBeadVectorIterator iterBead = vBeads.begin(); iterBead!=vBeads.end(); iterBead++)
    {
        const long type = (*iterBead)->GetType();

        if(type < m_BeadTypeTotal)
        {
            m_vBeadTotals.at(type) += 1;
            m_vBeadKE.at(type) += (*iterBead)->GetKE();
        }
        else
        {
            bIllegalBeadType = true;
            illegalType = type;
        }
    }

    if(bIllegalBeadType)
    {
        // Log an error message: should we somehow stop the analysis?
    }
    else if(m_SamplesTaken%m_SamplesPerDataPoint == 0)
    {
        m_SamplesTaken = 0;

        // Normalize the data and write it to the process file. Recall that
        // the temperature is defined including the 3/2 factor needed to convert 
        // from the mean KE in 3 dimensions to the temperature itself. This means 
        // that what we are actually writing out is not the bead KE but its 
        // equivalent temperature.
        // Note that if a bead type has no instances, this is not an error. 
        // We just write zero to the output file.

 	   CTimeSeriesData* const pTSD = new CTimeSeriesData(beadTypeTotal+1);
	   pTSD->SetValue(0,  pISimBox->GetCurrentTime(), "Time");

       for(long i=0; i<beadTypeTotal; i++)
       {
           if(m_vBeadTotals.at(i) > 0)
           {
                m_vBeadKE.at(i) /= (1.5*static_cast<double>(m_vBeadTotals.at(i)));
           }

           pTSD->SetValue(1+i, m_vBeadKE.at(i), "Bead KE");
       }

	   m_pState->AddTimeSeriesData(pTSD);
    }
}

// Function to check that the user-specified data is valid and. As this process
// is internally generated by the shadow SimBox we do not perform validity checking.

bool prBeadVelocityScalarProduct1dProfile::ValidateData(const CInputData &riData)
{
	return false;
}

// Function to check that the data for a process that is internally generated
// is valid, and to create the xxProcessState to serialise the data to file.

bool prBeadVelocityScalarProduct1dProfile::InternalValidateData(const ISimState* const pISimState)
{
	// An xxProcessState is created to hold the data that the process wants
	// to write to file. Data is passed as a series of CTimeSeriesData objects
	// as used for CHistoryState. Because this function is called after the
	// original xxProcess instance is copied (so that the xxProcessObject instance
	// can be discarded), creating the xxAggregateState here does not result in
	// it being destroyed. Hence, we can write the XML opening tags to the file safely.

	// The process state's file name depends on whether it is XML-enabled or not,
	// so we use two different SetState() signatures to allow for this. If it
	// is XML-enabled, we write out the standard processing instructions and
	// wrapper tags <ProcessState></ProcessState> as the first and last elements 
	// in the file. Because the process state can write data until the simulation 
	// ends, we only write the end tag in the base class's destructor.

#if EnableXMLProcesses == SimXMLEnabled

	SetState(new xxProcessState(xxBase::GetPSPrefix() + GetProcessType() + ToString(GetId()) + "." + pISimState->GetRunId() + ".xml", GetStartTime(), GetEndTime(), pISimState->GetRunId(), GetProcessType()));

	// Note that the opening <Header> tag is written in the xxProcessState class
	// but the closing tag is written here. This is a hack.

	zOutStream& os = m_pState->putXMLStartTags();
//	os << "<MonomerTotal>"		<< m_MonomerTotal		<< "</MonomerTotal>"	<< zEndl;
	os << "</Header>" << zEndl;

#elif EnableXMLProcesses == SimXMLDisabled

	SetState(new xxProcessState(xxBase::GetPSPrefix() + GetProcessType() + ToString(GetId()) + "." + pISimState->GetRunId(), GetStartTime(), GetEndTime(), pISimState->GetRunId(), GetProcessType()));

	zOutStream& os = m_pState->putASCIIStartTags();
//	os << "    MonomerTotal		" << m_MonomerTotal	 << zEndl;

#endif

	return true;
}

